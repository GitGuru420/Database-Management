CREATE DATABASE MODULE_9_LECTURE;
USE MODULE_9_LECTURE;

-- PRIMARY KEY
CREATE TABLE STUDENT (
	Roll INT PRIMARY KEY,
    Name VARCHAR(50),
    Phone VARCHAR(11)
);

-- FOREIGN KEY
CREATE TABLE COURSE_ENROLL (
	CourseName VARCHAR(50) PRIMARY KEY,
    F_Roll INT,
    FOREIGN KEY(F_Roll) REFERENCES STUDENT(Roll)
);

INSERT INTO STUDENT(Roll, Name, Phone)
VALUES(101, "Rahim", "017..."),
	  (102, "Karim", "015..."),
      (104, "Dulal", "016...");
      
INSERT INTO COURSE_ENROLL(CourseName, F_Roll)
VALUES("CSE101", 101),
	  ("PhitronDB", 104),
      ("CSE105", 101);
      
      
-- FOREIGN KEY ON DELETE OPERATIONS
CREATE TABLE NEW_STUDENT (
	Roll INT PRIMARY KEY,
    Name VARCHAR(50)
);

CREATE TABLE COURSE (
	CourseNo VARCHAR(10) PRIMARY KEY,
    CourseName VARCHAR(20)
);

CREATE TABLE ENROLL (
	Roll INT,
    CourseNo VARCHAR(5),
    Date DATE,
    -- FOREIGN KEY(Roll) REFERENCES STUDENT(Roll) ON DELETE CASCADE,
    FOREIGN KEY(Roll) REFERENCES NEW_STUDENT(Roll) ON DELETE SET NULL,
    -- FOREIGN KEY(CourseNo) REFERENCES Course(CourseNo) ON DELETE CASCADE
    FOREIGN KEY(CourseNo) REFERENCES COURSE(CourseNo) ON DELETE SET NULL
);

INSERT INTO NEW_STUDENT(Roll, Name)
VALUES(110, "Sakib"),
	  (120, "Rakib"),
      (111, "Nokib");
      
INSERT INTO COURSE(CourseNo, CourseName)
VALUES('A', "CSE101"),
	  ('B', "Phitron"),
	  ('C', "DSA");

INSERT INTO ENROLL(Roll, CourseNo, Date)
VALUES(110, 'B', '2023-10-10'),
	  (110, 'A', '2023-10-12'),
      (120, 'C', '2023-10-09');
      
      
-- SET OPERATIONS: 1) UNION 2) UNION ALL 3) INTERSECT 4) MINUS 
USE DUMMYDB;

SELECT * FROM EMPLOYEES
WHERE SALARY > 10000;
SELECT * FROM EMPLOYEES
WHERE DEPARTMENT_ID = 100;


SELECT * FROM EMPLOYEES
WHERE SALARY > 10000
UNION
SELECT * FROM EMPLOYEES
WHERE DEPARTMENT_ID = 100;


SELECT * FROM EMPLOYEES
WHERE SALARY > 10000
UNION ALL
SELECT * FROM EMPLOYEES
WHERE DEPARTMENT_ID = 100;


SELECT * FROM EMPLOYEES
WHERE SALARY > 10000
INTERSECT
SELECT * FROM EMPLOYEES
WHERE DEPARTMENT_ID = 100;

SELECT * FROM EMPLOYEES
WHERE SALARY > 10000
MINUS	-- MySQL E MINUS SUPPORT KORE NA
SELECT * FROM EMPLOYEES
WHERE DEPARTMENT_ID = 100;

-- MINUS ER ALTERNATIVE
SELECT * FROM EMPLOYEES
WHERE SALARY > 10000 AND DEPARTMENT_ID != 100;